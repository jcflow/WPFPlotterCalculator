<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathPlusLib.Desktop</name>
    </assembly>
    <members>
        <member name="T:MathPlusLib.Function2D">
            <summary>
            Represents a function that can be plotted on a 2D plane
            </summary>
            <param name="x">X input of the function</param>
            <returns>Y output of the function</returns>
        </member>
        <member name="T:MathPlusLib.Function3D">
            <summary>
            Represents a function that can be plotted in a 3D space
            </summary>
            <param name="x">X input of the function</param>
            <param name="y">Y input of the function</param>
            <returns>Z output of the function</returns>
        </member>
        <member name="T:MathPlusLib.FunctionComplex">
            <summary>
            Represents an input-output mathematical function
            </summary>
            <param name="input">Function input</param>
            <returns>Function output</returns>
        </member>
        <member name="T:MathPlusLib.IntegrationType">
            <summary>
            Type of algorithm used in integration
            </summary>
        </member>
        <member name="T:MathPlusLib.MathPlus">
            <summary>
            Main class of basic functions. Additional functions are provided in subclasses.
            </summary>
        </member>
        <member name="T:MathPlusLib.MathPlus.Calculus">
            <summary>
            Methods pertaining to calculus
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.FuncMin(MathPlusLib.Function2D,System.Double,System.Double,System.Double)">
            <summary>
            Returns the minimum value of an expression within a range
            </summary>
            <param name="exp">Expression to find the minimum of</param>
            <param name="lower">Lower bound of input values</param>
            <param name="upper">Upper bound of input values</param>
            <param name="increment">Amount to increment by when finding the minimum</param>
            <returns>Minimum value of exp within the range</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.FuncMax(MathPlusLib.Function2D,System.Double,System.Double,System.Double)">
            <summary>
            Returns the maximum value of an expression within a range
            </summary>
            <param name="exp">Expression to find the maximum of</param>
            <param name="lower">Lower bound of input values</param>
            <param name="upper">Upper bound of input values</param>
            <param name="increment">Amount to increment by when finding the maximum</param>
            <returns>Maximum value of exp within the range</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.Derivative(MathPlusLib.Function2D,System.Double,System.Double)">
            <summary>
            Returns the single-point derivative of a function
            </summary>
            <param name="function">Function to calculate the derivative from</param>
            <param name="point">Point at which to perform the derivative on</param>
            <param name="deltaX">
            Accuracy level to perform the derivative. This value is how far on either side
            of <paramref name="point"/> to check when determining the derivative.
            </param>
            <returns></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.IntegrateLow(MathPlusLib.Function2D,System.Double,System.Double,System.Int32)">
            <summary>
            Integrate using the lower-bound algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <returns>Total area calculated by integration</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.IntegrateHigh(MathPlusLib.Function2D,System.Double,System.Double,System.Int32)">
            <summary>
            Integrate using the upper-bound algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <returns>Total area calculated by integration</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.IntegrateMidpoint(MathPlusLib.Function2D,System.Double,System.Double,System.Int32)">
            <summary>
            Integrate using the midpoint algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <returns>Total area calculated by integration</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.IntegrateTrapezoidal(MathPlusLib.Function2D,System.Double,System.Double,System.Int32)">
            <summary>
            Integrate using the trapezoidal algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <returns>Total area calculated by integration</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.IntegrateSimpson(MathPlusLib.Function2D,System.Double,System.Double,System.Int32)">
            <summary>
            Integrate using Simpson's algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <returns>Total area calculated by integration</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="divisions"/> is not even.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Calculus.Integrate(MathPlusLib.Function2D,System.Double,System.Double,System.Int32,MathPlusLib.IntegrationType)">
            <summary>
            Integrate using a given algorithm
            </summary>
            <param name="function">Function used in integration</param>
            <param name="lower">Lower bound of integration</param>
            <param name="upper">Upper bound of integration</param>
            <param name="divisions">Number of divisions to use</param>
            <param name="type">Type of integration to use</param>
            <returns>Total area calculated by integration</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="function"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="type"/> is <see cref="F:MathPlusLib.IntegrationType.Simpson"/> and
            <paramref name="divisions"/> is not even.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="divisions"/> is less than or equal to zero, or if
            <paramref name="type"/> is not a valid <see cref="T:MathPlusLib.IntegrationType"/>.
            </exception>
        </member>
        <member name="T:MathPlusLib.MathPlus.Numerics">
            <summary>
            Library of functions related to the intricacies of numbers
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.LeastCommonMultiple(System.Int32,System.Int32)">
            <summary>
            Returns the least common multiple of the two numbers
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>
            Lowest number that is divisible by both <paramref name="a"/>
            and <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.GreatestCommonDenominator(MathPlusLib.Fraction,MathPlusLib.Fraction)">
            <summary>
            Returns the greatest common denominator of two given fractions
            </summary>
            <param name="a">First fraction</param>
            <param name="b">Second fraction</param>
            <returns>
            Highest number that both denominators are divisible by, 
            -1 if there is none.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.GreatestCommonDenominator(System.Int32,System.Int32)">
            <summary>
            Returns the greatest common denominator of two given denominators
            </summary>
            <param name="a">Denominator of first fraction</param>
            <param name="b">Denominator of second fraction</param>
            <returns>
            Highest number that both denominators are divisible by, -1 if there
            is none.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.Round(System.Double,System.Int32)">
            <summary>
            Rounds a number to the specified number of digits.
            </summary>
            <param name="value">Value to round</param>
            <param name="digits">Numer of digits to round to</param>
            <returns>
            The number with the specified digits which is closest to
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.Floor(System.Double)">
            <summary>
            Rounds a number down
            </summary>
            <param name="value">Value to round</param>
            <returns>Lowest integer value within 1.0</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.Ceiling(System.Double)">
            <summary>
            Rounds a number up
            </summary>
            <param name="value">Value to round</param>
            <returns>Highest integer value within 1.0</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.AlmostEqualToNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Normalized approximate comparison function
            </summary>
            <param name="a">First value to compare</param>
            <param name="b">Second value to compare</param>
            <param name="diff">
            Approximated difference between <paramref name="a"/> and 
            <paramref name="b"/>.
            </param>
            <param name="maxError">Maximum error in the approximation, accuracy</param>
            <returns>True if approximately equal, false if not</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Numerics.AlmostEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Approximate comparison function
            </summary>
            <param name="a">First value to compare</param>
            <param name="b">Second value to compare</param>
            <param name="err">Maximum error in the approximation; inaccuracy.</param>
            <returns></returns>
        </member>
        <member name="T:MathPlusLib.MathPlus.Probability">
            <summary>
            Functions relating to random numbers and probability
            </summary>
        </member>
        <member name="F:MathPlusLib.MathPlus.Probability.Rand">
            <summary>
            Static <see cref="T:System.Random"/> instance for convenience.
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Probability.Factorial(System.Int64)">
            <summary>
            Factorial of a number; n!
            </summary>
            <param name="value">Value to take the factorial of</param>
            <returns>Factorial of <paramref name="value"/>: n!</returns>
            <remarks>
            Both input and output using this function are often very large, so
            a <see cref="T:System.Int64"/> (<c>long</c>) is used to avoid overflow.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Probability.Permutation(System.Int64,System.Int64)">
            <summary>
            Permutations of a set of values, given a domain size and selection size.
            </summary>
            <param name="n">Size of domain</param>
            <param name="r">Number of items selected</param>
            <returns>Number of permutations: nPr.</returns>
            <remarks>
            Both input and output using this function are often very large, so
            a <see cref="T:System.Int64"/> (<c>long</c>) is used to avoid overflow.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Probability.Combination(System.Int64,System.Int64)">
            <summary>
            Combinations of a set of values, given a domain size and selection size.
            </summary>
            <param name="n">Size of domain</param>
            <param name="r">Number of items selected</param>
            <returns>Number of permutations: nCr.</returns>
            <remarks>
            Both input and output using this function are often very large, so
            a <see cref="T:System.Int64"/> (<c>long</c>) is used to avoid overflow.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Probability.RandomIntsNoRepeat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a List of random integers of a given size, without repeats.
            </summary>
            <param name="min">Minimum value to generate</param>
            <param name="max">Maximum value to generate</param>
            <param name="length">Length of List to generate</param>
            <returns>A list of nonrepeating, random integers.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <c><paramref name="max"/> &lt;= <paramref name="min"/></c>
            or if <c><paramref name="max"/> - <paramref name="min"/> > 
            <paramref name="length"/></c>, where more numbers are requested
            than can be generated.
            </exception>
        </member>
        <member name="T:MathPlusLib.MathPlus.Solver">
            <summary>
            Solves functions for their roots. Currently only has the BrentDekker method.
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Solver.SolveBrentDekker(MathPlusLib.Function2D,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Solves an equation using the BrentDekker method
            </summary>
            <param name="func">Function to solve</param>
            <param name="lowBound">Lower bound of result</param>
            <param name="highBound">Upper bound of result</param>
            <param name="precision">Precision value used when solving</param>
            <param name="maxDepth">Max depth of interative function.</param>
            <returns>Solution to <paramref name="func"/>() == 0</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if solver fails.</exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Solver.TryBrentDekker(MathPlusLib.Function2D,System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            Attempts to solve an equation using the BrentDekker method.
            </summary>
            <param name="func">Function to solve</param>
            <param name="low">Lower bound of result</param>
            <param name="high">Upper bound of result</param>
            <param name="precision">Precision value used when solving</param>
            <param name="maxDepth">Max depth of iterative function</param>
            <param name="result">Solution to <paramref name="func"/>() == 0</param>
            <returns>True if solver succeeds, false if it fails.</returns>
        </member>
        <member name="T:MathPlusLib.MathPlus.Stats">
            <summary>
            Statistical Functions
            </summary>
        </member>
        <member name="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException">
            <summary>
            True if exceptions should be thrown if data is not
            suited for test or interval. Setting this to false
            disables the exceptions.
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum of all values in the <see cref="!:IEnumerable"/>.
            </summary>
            <param name="values">Values to sum</param>
            <returns>Sum of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the sum of all values in the <see cref="!:IEnumerable"/>.
            </summary>
            <param name="values">Values to sum</param>
            <returns>Sum of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the mean of all values in the <see cref="!:IEnumerable"/>.
            </summary>
            <param name="values">Values to find the mean of</param>
            <returns>Mean of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Mean(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the mean of all values in the <see cref="!:IEnumerable"/>.
            </summary>
            <param name="values">Values to find the mean of</param>
            <returns>Mean of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.StandardDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the Standard Deviation of all values in the <see cref="!:IEnumerable"/>.
            </summary>
            <param name="values">Values to find the SD of</param>
            <returns>SD of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.StandardDev(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns the Standard Deviation of all values in the <see cref="!:IEnumerable"/>
            with a precalculated mean for speed.
            </summary>
            <param name="values">Values to find the SD of</param>
            <param name="mean">Precalculated mean of <paramref name="values"/>.</param>
            <returns>SD of all items in <paramref name="values"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the Root-Mean-Square (RMS) of data
            </summary>
            <param name="data">Data to find the RMS of</param>
            <returns>RMS of <paramref name="data"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the Root-Mean-Square (RMS) of data
            </summary>
            <param name="data">Data to find the RMS of</param>
            <returns>RMS of <paramref name="data"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Proportion(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Calculates what proportion of a dataset is <c>true</c>.
            </summary>
            <param name="sample">Sample data to evaluate</param>
            <returns>Proportion of <paramref name="sample"/> which equals <c>true</c>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.Proportion``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Calculates what proportion of a data set evaluates to <c>true</c>
            when evaluated in a <see cref="!:Predicate"/>.
            </summary>
            <typeparam name="T">Type of data sampled</typeparam>
            <param name="sample">Sample of data to evaluate</param>
            <param name="evaluator">Predicate to evaluate data with</param>
            <returns>
            Proportion of <paramref name="sample"/> which evaluates to <c>true</c>
            when evaluated with <paramref name="evaluator"/>().
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OnePropZTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Int32,System.Double)">
            <summary>
            Performs a One-Proportion Z Test
            </summary>
            <param name="p0">Null hypothesis proportion</param>
            <param name="HA">Direction for alternative hypothesis</param>
            <param name="proportion">Observed value proportion</param>
            <param name="n">Number of data points</param>
            <param name="alpha">Alpha level in test</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="proportion"/>, <paramref name="p0"/>,
            or <paramref name="alpha"/> is outside of range (0, 1), or if 
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if p * n &lt; 10 or if q * n &lt; 10, where 
            <c>p = <paramref name="proportion"/></c> and 
            <c>q = 1 - <paramref name="proportion"/></c>.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OnePropZTest(System.Double,MathPlusLib.InequalityType,System.Collections.Generic.IEnumerable{System.Boolean},System.Double)">
            <summary>
            Performs a One-Proportion Z Test
            </summary>
            <param name="p0">Null hypothesis proportion</param>
            <param name="HA">Direction for alternative hypothesis</param>
            <param name="data">Data set</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="proportion"/>, <paramref name="p0"/>,
            or <paramref name="alpha"/> is outside of range (0, 1), or if 
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if p * n &lt; 10 or if q * n &lt; 10, where 
            <c>p = <paramref name="proportion"/></c> and 
            <c>q = 1 - <paramref name="proportion"/></c>.
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.OnePropZTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoPropZTest(MathPlusLib.InequalityType,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Performs a Two-Proportion Z-Test
            </summary>
            <param name="HA">
            Alternative Hypothesis direction: 
            <paramref name="p2"/> ? <paramref name="p1"/></param>
            <param name="p1">Proportion in first data set</param>
            <param name="p2">Proportion in second data set</param>
            <param name="n1">Number of data points in first set</param>
            <param name="n2">Number of data points in second set</param>
            <param name="alpha">Alpha level in test</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="p1"/>, <paramref name="p2"/>, or
            <paramref name="alpha"/> is outside of range (0, 1), or if 
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if <paramref name="p1"/> or <paramref name="p2"/> does not
            pass the 10-successes 10-failures condition. See 
            <see cref="M:MathPlusLib.MathPlus.Stats.OnePropZTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Int32,System.Double)"/>
            for details.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoPropZTest(MathPlusLib.InequalityType,System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean},System.Double)">
            <summary>
            Performs a Two-Proportion Z-Test
            </summary>
            <param name="HA">Alternative Hypothesis direction: p2 ? p1</param>
            <param name="data1">First data set</param>
            <param name="data2">Second data set</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of range (0, 1), or if 
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/> is set to <c>true</c>
            and either p1 or p2 does not pass the 10-successes 10-failures condition. See 
            <see cref="M:MathPlusLib.MathPlus.Stats.OnePropZTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Int32,System.Double)"/>
            for details.
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.TwoPropZTest(MathPlusLib.InequalityType,System.Double,System.Double,System.Int32,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OneSampleTTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Performs a One-Sample T-Test
            </summary>
            <param name="mu0">Expected mean in Null Hypothesis</param>
            <param name="HA">Direction of Alternative Hypothesis</param>
            <param name="mean">Observed mean in data</param>
            <param name="sd">Observed SD in data</param>
            <param name="n">Number of data points</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if <paramref name="n"/> is zero or negative, or if
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OneSampleTTest(System.Double,MathPlusLib.InequalityType,System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Performs a One-Sample T-Test
            </summary>
            <param name="mu0">Expected mean in null hypothesis</param>
            <param name="HA">Direction of alternative hypothesis</param>
            <param name="sample">Sample data</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if <paramref name="n"/> is zero or negative, or if
            <paramref name="HA"/> is an invalid <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.OneSampleTTest(System.Double,MathPlusLib.InequalityType,System.Double,System.Double,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoSampleTTest(MathPlusLib.InequalityType,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Performs a two-sample T-Test
            </summary>
            <param name="HA">
            Alternate Hypothesis Direction:
            <paramref name="mean2"/> ? <paramref name="mean1"/>
            </param>
            <param name="mean1">Mean of first sample</param>
            <param name="mean2">Mean of second sample</param>
            <param name="sd1">SD of first sample</param>
            <param name="sd2">SD of second sample</param>
            <param name="n1">Number of data points in first sample</param>
            <param name="n2">Number of data points in second sample</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if <paramref name="n1"/> or <paramref name="n2"/> is zero or
            negative, or if <paramref name="HA"/> is an invalid
            <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoSampleTTest(MathPlusLib.InequalityType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Performs a two-sample T-Test
            </summary>
            <param name="HA">
            Alternate Hypothesis Direction: mean2 ? mean1
            </param>
            <param name="sample1">First sample</param>
            <param name="sample2">Second sample</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if <paramref name="n1"/> or <paramref name="n2"/> is zero or
            negative, or if <paramref name="HA"/> is an invalid
            <see cref="T:MathPlusLib.InequalityType"/>.
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.TwoSampleTTest(MathPlusLib.InequalityType,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Double},System.Double)">
            <summary>
            Performs a Chi-Square Goodness-of-Fit test. If
            <paramref name="expected"/> is <c>null</c>, then values will be
            filled in from the mean of <paramref name="counts"/>.
            </summary>
            <param name="counts">Counted values for each category</param>
            <param name="expected">Expected values for each category</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if any value in <paramref name="counts"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="counts"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thronw if <paramref name="counts"/> is empty.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if any value in <paramref name="expected"/> is below 5 
            and <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/> is set to <c>true</c>.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.Dictionary{System.String,System.Double},System.Collections.Generic.Dictionary{System.String,System.Double},System.Double)">
            <summary>
            Performs a Chi-Square Goodness-of-Fit test. Truncates values in
            <paramref name="counts"/> to <see cref="T:System.Int32"/> values. If
            <paramref name="expected"/> is <c>null</c>, then values will be
            filled in from the mean of <paramref name="counts"/>.
            </summary>
            <param name="counts">Counted values for each category</param>
            <param name="expected">Expected values for each category</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if any value in <paramref name="counts"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="counts"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thronw if <paramref name="counts"/> is empty.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if any value in <paramref name="expected"/> is below 5 
            and <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/> is set to <c>true</c>.
            </exception>
            <remarks>
            Calls <see cref="!:ChiSquareGOFTest(Dictionary&lt;string, double&gt;, 
            Dictionary&lt;string, int&gt;, double)"/>
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Double)">
            <summary>
            Performs a Chi-Square Goodness-of-Fit test
            </summary>
            <param name="counts">Counted values for implied categories</param>
            <param name="expected">Expected values for implied categories</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if any value in <paramref name="counts"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="counts"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thronw if <paramref name="counts"/> is empty.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if any value in <paramref name="expected"/> is below 5 
            and <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/> is set to <c>true</c>.
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Double},System.Double)"/>
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.List{System.Int32},System.Double)">
            <summary>
            Performs a Chi-Square Goodness-of-Fit test, calculating expected values
            from the mean of <paramref name="counts"/>.
            </summary>
            <param name="counts">Counted values for implied categories</param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="alpha"/> is outside of (0, 1), or
            if any value in <paramref name="counts"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="counts"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thronw if <paramref name="counts"/> is empty.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if any expected value is below 5 and <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/>
            is set to <c>true</c>
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.ChiSquareGOFTest(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Double},System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.ChiSquareTest(MathPlusLib.MathMatrix,MathPlusLib.MathMatrix,System.Double)">
            <summary>
            Performs a Chi-Square test of Independence or Homogeneity
            </summary>
            <param name="observed">Observed counted values.</param>
            <param name="expected">
            Expected values. If this is <c>null</c>, this will be calculated
            from <paramref name="observed"/> with the methods of a Chi-Square 
            test of Homogeneity.
            </param>
            <param name="alpha">Alpha level</param>
            <returns>Test results</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="observed"/> is <c>null</c>.
            </exception>
            <exception cref="T:MathPlusLib.Stats.StatisticInappropriateException">
            Thrown if any value in <paramref name="expected"/> is
            less than 5 and <see cref="P:MathPlusLib.MathPlus.Stats.ThrowInappropriateException"/>
            is set to <c>true</c>. This occurs even when values for
            <paramref name="expected"/> are generated in this method.
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OnePropZInterval(System.Double,System.Int32,System.Double)">
            <summary>
            Creates a confidence interval for a single proportion data set.
            </summary>
            <param name="proportion">Proportion of data</param>
            <param name="n">Number of data points</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> or 
            <paramref name="proportion"/> is outside of range (0, 1).
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OnePropZInterval(System.Collections.Generic.IEnumerable{System.Boolean},System.Double)">
            <summary>
            Creates a confidence interval for a single proportion data set.
            </summary>
            <param name="data">Data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> or 
            <paramref name="proportion"/> is outside of range (0, 1).
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoPropZInterval(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a confidence interval for two proportion data sets.
            </summary>
            <param name="p1">Proportion for first data set</param>
            <param name="p2">Proportion for second data set</param>
            <param name="n1">Number of data points in first data set</param>
            <param name="n2">Number of data points in second data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/>, <paramref name="p1"/>,
            or <paramref name="p2"/> is outside of range (0, 1).
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoPropZInterval(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean},System.Double)">
            <summary>
            Constructs a confidence interval for two proportion data sets.
            </summary>
            <param name="data1">First data set</param>
            <param name="data2">Second data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/>, <paramref name="p1"/>,
            or <paramref name="p2"/> is outside of range (0, 1).
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.TwoPropZInterval(System.Double,System.Double,System.Int32,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OneSampleTInterval(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs a confidence interval from one quantitative data set.
            </summary>
            <param name="mean">Mean of data</param>
            <param name="sd">SD of data</param>
            <param name="n">Number of data points</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> is outside of range (0, 1).
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.OneSampleTInterval(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Constructs a confidence interval from one quantitative data set.
            </summary>
            <param name="data">Data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> is outside of range (0, 1).
            </exception>
            <remarks>Calls <see cref="M:MathPlusLib.MathPlus.Stats.OneSampleTInterval(System.Double,System.Double,System.Int32,System.Double)"/>.</remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoSampleTInterval(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a confidence interval from two quantitative data sets.
            </summary>
            <param name="mean1">Mean of first data set</param>
            <param name="mean2">Mean of second data set</param>
            <param name="sd1">SD of first data set</param>
            <param name="sd2">SD of second data set</param>
            <param name="n1">Number of data points in first data set</param>
            <param name="n2">Number of data points in second data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> is outside of range (0, 1).
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.TwoSampleTInterval(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoSampleTInterval(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a confidence interval from two quantitative data sets.
            </summary>
            <param name="deltaMean">Difference of means: mu2 - mu1</param>
            <param name="sd1">SD of first data set</param>
            <param name="sd2">SD of second data set</param>
            <param name="n1">Number of data points in first data set</param>
            <param name="n2">Number of data points in second data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> is outside of range (0, 1).
            </exception>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TwoSampleTInterval(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Constructs a confidence interval from two quantitative data sets
            </summary>
            <param name="data1">First data set</param>
            <param name="data2">Second data set</param>
            <param name="confidence">Confidence level</param>
            <returns>Confidence Interval</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="confidence"/> is outside of range (0, 1).
            </exception>
            <remarks>
            Calls <see cref="M:MathPlusLib.MathPlus.Stats.TwoSampleTInterval(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Stats.TDegreesOfFreedom(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates degrees of freedom to use in a Two-sample T-Test or
            T Interval.
            </summary>
            <param name="s1">SD of first data set</param>
            <param name="s2">SD of second data set</param>
            <param name="n1">Number of data points in first data set</param>
            <param name="n2">Number of data points in second data set</param>
            <returns>Degrees of freedom to use in T model.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Sin(System.Double)">
            <summary>
            Returns the sine of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Sine of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Cos(System.Double)">
            <summary>
            Returns the cosine of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Cosine of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Tan(System.Double)">
            <summary>
            Returns the tangent of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Tangent of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Csc(System.Double)">
            <summary>
            Returns the cosecant of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Cosecant of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Sec(System.Double)">
            <summary>
            Returns the secant of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Secant of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.Cot(System.Double)">
            <summary>
            Returns the cotangent of an angle
            </summary>
            <param name="theta">Angle, in radians</param>
            <returns>Cotangent of <paramref name="theta"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.ASin(System.Double)">
            <summary>
            Returns the inverse sine (arcsine) of a proportion
            </summary>
            <param name="proportion">Proportion of sides</param>
            <returns>
            Inverse sine of <paramref name="proportion"/>, in radians.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.ACos(System.Double)">
            <summary>
            Returns the inverse cosine (arccosine) of a proportion
            </summary>
            <param name="proportion">Proportion of sides</param>
            <returns>
            Inverse cosine of <paramref name="proportion"/>, in radians.
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Trig.ATan(System.Double)">
            <summary>
            Returns the inverse tangent (arctangent) of a proportion
            </summary>
            <param name="proportion">Proportion of sides</param>
            <returns>
            Inverse tangent of <paramref name="proportion"/>, in radians.
            </returns>
        </member>
        <member name="F:MathPlusLib.MathPlus.PI">
            <summary>
            Ratio of a circle's diameter to its cicumference: &#x3c0;
            </summary>
        </member>
        <member name="F:MathPlusLib.MathPlus.E">
            <summary>
            Euler's number e
            </summary>
        </member>
        <member name="F:MathPlusLib.MathPlus.SQRT2">
            <summary>
            Square root of 2
            </summary>
        </member>
        <member name="M:MathPlusLib.MathPlus.Pow(System.Double,System.Double)">
            <summary>
            Raises a number to a power
            </summary>
            <param name="baseNum">Number to be raised to a power</param>
            <param name="exponent">Exponent to be raised to</param>
            <returns>The value <paramref name="baseNum"/> ^ <paramref name="exponent"/>.</returns>
            <remarks>This is an alternative to <c>Math.Pow(double, double)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Exp(System.Double)">
            <summary>
            Raises e to a power
            </summary>
            <param name="exponent">Exponent to raise e to</param>
            <returns>The value e ^ <paramref name="exponent"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Sqrt(System.Double)">
            <summary>
            Returns the square root of a number
            </summary>
            <param name="radicand">Number to take the square root of</param>
            <returns>The square root of <paramref name="radicand"/>.</returns>
            <remarks>This is an alternative to <c>Math.Sqrt(double)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Root(System.Double,System.Double)">
            <summary>
            Returns the nth root of a number
            </summary>
            <param name="radicand">Number to take the nth root of</param>
            <param name="radical">Index of radical n</param>
            <returns>The nth root of <paramref name="radicand"/>.</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of a number
            </summary>
            <param name="value">Number to take the base-10 logarithm of</param>
            <returns>The base-10 logarithm of <paramref name="value"/>.</returns>
            <remarks>This is a shortcut to <c>Math.Log10(double)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Log(System.Double,System.Double)">
            <summary>
            Returns the base-n logarithm of a number
            </summary>
            <param name="value">Number to take the base-n logarithm of</param>
            <param name="baseNum">Base of the logarithm n</param>
            <returns>The base-n logarithm of <paramref name="value"/>.</returns>
            <remarks>This is a shortcut to <c>Math.Log(double, double)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Ln(System.Double)">
            <summary>
            Returns the natural logarithm (base e) of a number
            </summary>
            <param name="value">Number to take the natural logarithm of</param>
            <returns>The natural logarithm of <paramref name="value"/>.</returns>
            <remarks>This is a shortcut to <c>Math.Log(double)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Abs(System.Double)">
            <summary>
            Returns the absolute value of a number |value|
            </summary>
            <param name="value">Number to take the absolute value of</param>
            <returns>|<paramref name="value"/>|</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Sign(System.Double)">
            <summary>
            Returns the sign of a number in the form of an integer
            </summary>
            <param name="value">Value to check the sign of</param>
            <returns>
            -1 if <paramref name="value"/> is negative, 0 if zero, and
            1 if positive.
            </returns>
            <remarks>This is a shortcut to <c>Math.Sign(value)</c></remarks>
        </member>
        <member name="M:MathPlusLib.MathPlus.Fractional(System.Double)">
            <summary>
            Returns the fractional part of a number
            </summary>
            <param name="value">Value to take the fractional part of</param>
            <returns>The part of the number after the decimal point</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Min(System.Double,System.Double)">
            <summary>
            Returns the lower of two values
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>
            Whichever is lower, <paramref name="a"/> or <paramref name="b"/>
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum of a collection of values
            </summary>
            <param name="values">Values to find the minimum from</param>
            <returns>The lowest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Min(System.Double[])">
            <summary>
            Returns the minimum of a collection of values
            </summary>
            <param name="values">Values to find the minimum from</param>
            <returns>The lowest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum of a collection of values
            </summary>
            <param name="values">Values to find the minimum from</param>
            <returns>The lowest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Max(System.Double,System.Double)">
            <summary>
            Returns the higher of two values
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>
            Whichever is higher, <paramref name="a"/> or <paramref name="b"/>
            </returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum of a collection of values
            </summary>
            <param name="values">Values to find the maximum from</param>
            <returns>The highest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Max(System.Double[])">
            <summary>
            Returns the maximum of a collection of values
            </summary>
            <param name="values">Values to find the maximum from</param>
            <returns>The highest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum of a collection of values
            </summary>
            <param name="values">Values to find the maximum from</param>
            <returns>The highest number within <paramref name="values"/></returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrains a value to within a minimum and maximum.
            </summary>
            <param name="value">Value to constrain</param>
            <param name="min">Lower bound, inclusive</param>
            <param name="max">Upper bound, inclusive</param>
            <returns>Constrained value within [min, max]</returns>
        </member>
        <member name="M:MathPlusLib.MathPlus.Sigma(MathPlusLib.Function2D,System.Double,System.Double,System.Double)">
            <summary>
            Returns the iterative sum of a function
            </summary>
            <param name="exp">Expression to be summed</param>
            <param name="lower">Lower bound of input</param>
            <param name="upper">Upper bound of input</param>
            <param name="increment">Amount to increment by</param>
            <returns>Sum of all outputs from the specified inputs</returns>
        </member>
        <member name="T:MathPlusLib.Extensions.MathExtensions">
            <summary>
            Extension Methods class
            </summary>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Raises a number to a power
            </summary>
            <param name="baseNum">Number to be raised to a power</param>
            <param name="exponent">Exponent to be raised to</param>
            <returns>The value baseNum ^ exponent</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Pow(System.Int32,System.Double)">
            <summary>
            Raises a number to a power
            </summary>
            <param name="baseNum">Number to be raised to a power</param>
            <param name="exponent">Exponent to be raised to</param>
            <returns>The value baseNum ^ exponent</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Sqrt(System.Double)">
            <summary>
            Returns the square root of a number
            </summary>
            <param name="radicand">Value to take the square root of</param>
            <returns>The square root of radicand</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Sqrt(System.Int32)">
            <summary>
            Returns the square root of a number
            </summary>
            <param name="radicand">Value to take the square root of</param>
            <returns>The square root of radicand</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Root(System.Double,System.Double)">
            <summary>
            Returns the nth root of a number
            </summary>
            <param name="radicand">Value to take the nth root</param>
            <param name="radical">Index of radical n</param>
            <returns>The nth root of radicand</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Root(System.Int32,System.Double)">
            <summary>
            Returns the nth root of a number
            </summary>
            <param name="radicand">Value to take the nth root</param>
            <param name="radical">Index of radical n</param>
            <returns>The nth root of radicand</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of a number
            </summary>
            <param name="value">Number to take the base-10 logarithm of</param>
            <returns>The base-10 logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Log10(System.Int32)">
            <summary>
            Returns the base-10 logarithm of a number
            </summary>
            <param name="value">Number to take the base-10 logarithm of</param>
            <returns>The base-10 logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Log(System.Double,System.Double)">
            <summary>
            Returns the base-n logarithm of a number
            </summary>
            <param name="value">Number to take the base-n logarithm of</param>
            <param name="baseNum">Base of the logarithm n</param>
            <returns>The base-n logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Log(System.Int32,System.Double)">
            <summary>
            Returns the base-n logarithm of a number
            </summary>
            <param name="value">Number to take the base-n logarithm of</param>
            <param name="baseNum">Base of the logarithm n</param>
            <returns>The base-n logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Ln(System.Double)">
            <summary>
            Returns the natural logarithm (base e) of a number
            </summary>
            <param name="value">Number to take the natural logarithm of</param>
            <returns>The natural logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Ln(System.Int32)">
            <summary>
            Returns the natural logarithm (base e) of a number
            </summary>
            <param name="value">Number to take the natural logarithm of</param>
            <returns>The natural logarithm of value</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Abs(System.Double)">
            <summary>
            Returns the absolute value of a number |value|
            </summary>
            <param name="value">Number to take the absolute value of</param>
            <returns>|value|</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a number |value|
            </summary>
            <param name="value">Number to take the absolute value of</param>
            <returns>|value|</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Sign(System.Double)">
            <summary>
            Returns the sign of a number in the form of an integer
            </summary>
            <param name="value">Value to check the sign of</param>
            <returns>-1 if value is negative, 0 if zero, and 1 if positive</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Sign(System.Int32)">
            <summary>
            Returns the sign in the form of an integer
            </summary>
            <param name="value">Value to check the sign of</param>
            <returns>-1 if value is negative, 0 if zero, and 1 if positive</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Fractional(System.Double)">
            <summary>
            Returns fractional part of a number
            </summary>
            <param name="value">Value to take the fractional part of</param>
            <returns>The part of the number after the decimal point</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum of a collection of values
            </summary>
            <param name="values">Values to find the minimum from</param>
            <returns>The lowest number within values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum of a collection of values
            </summary>
            <param name="values">Values to find the minimum from</param>
            <returns>The lowest number within values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum of a collection of values
            </summary>
            <param name="values">Values to find the maximum from</param>
            <returns>The greatest number within values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum of a collection of values
            </summary>
            <param name="values">Values to find the maximum from</param>
            <returns>The greatest number within values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrains a value to within a minumum and maximum.
            </summary>
            <param name="value">Value to constrain</param>
            <param name="min">Lower bound, inclusive</param>
            <param name="max">Upper bound, inclusive</param>
            <returns>Constrained value within [min, max]</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.MathExtensions.Constrain(System.Int32,System.Double,System.Double)">
            <summary>
            Constrains a value to within a minumum and maximum.
            </summary>
            <param name="value">Value to constrain</param>
            <param name="min">Lower bound, inclusive</param>
            <param name="max">Upper bound, inclusive</param>
            <returns>Constrained value within [min, max]</returns>
        </member>
        <member name="T:MathPlusLib.Extensions.NumericsExtensions">
            <summary>
            Extension methods for MathPlus.Numerics
            </summary>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds a number to the specified number of digits.
            </summary>
            <param name="value">Value to round</param>
            <param name="digits">Number of digits to round to</param>
            <returns>
            The number with the specified number of digits which is closest to
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.Floor(System.Double)">
            <summary>
            Rounds a number down
            </summary>
            <param name="value">Value to round</param>
            <returns>Lowest integer value within 1.0</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.Ceiling(System.Double)">
            <summary>
            Rounds a number up
            </summary>
            <param name="value">Value to round</param>
            <returns>Highest integer value within 1.0</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.AlmostEqualToNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Normalized approximate comparison function
            </summary>
            <param name="value">Value to compare</param>
            <param name="other">Other value to compare to</param>
            <param name="diff">Approximated difference between value and other</param>
            <param name="maxError">Maximum error in the approximation; accuracy</param>
            <returns>True if approximately equal, false if not</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.AlmostEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Approximate comparison function
            </summary>
            <param name="value">Value to compare</param>
            <param name="other">Other value to compare to</param>
            <param name="err">Maximum error in the approximation; accuracy.</param>
            <returns>True if approximately equal, false if not</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.IsOdd(System.Int32)">
            <summary>
            Determines if an integer is odd.
            </summary>
            <param name="n">Number to test</param>
            <returns>True if the number is odd, false if even</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.IsEven(System.Int32)">
            <summary>
            Determines if an integer is even.
            </summary>
            <param name="n">Number to test</param>
            <returns>True if the number is even, false if odd</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.IsDivisibleBy(System.Int32,System.Int32)">
            <summary>
            Determines if an integer is divisible by another integer.
            </summary>
            <param name="n">Number to test</param>
            <param name="divisor">Integer <paramref name="n"/> is tested to be divisible by</param>
            <returns>
            True if <paramref name="n"/> is divisible by <paramref name="divisor"/>,
            false otherwise.
            </returns>
        </member>
        <member name="M:MathPlusLib.Extensions.NumericsExtensions.IsInteger(System.Double,System.Int32)">
            <summary>
            Deterimines if a number is approximately an integer
            </summary>
            <param name="value">Number to test</param>
            <param name="precision">Number of decimal places to round to before test</param>
            <returns>
            True if <paramref name="value"/> is an integer to <paramref name="precision"/>
            decimal places, false otherwise.
            </returns>
        </member>
        <member name="T:MathPlusLib.Extensions.StatExtensions">
            <summary>
            Extension methods for <see cref="T:MathPlusLib.MathPlus.Stats"/>
            </summary>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sum of all the values in a collection
            </summary>
            <param name="values">Collection to sum</param>
            <returns>Sum of all numbers in values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the sum of all the values in a collection
            </summary>
            <param name="values">Collection to sum</param>
            <returns>Sum of all the numbers in values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the mean of all the values in a collection
            </summary>
            <param name="values">Collection to find the mean of</param>
            <returns>The mean of all the numbers in values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.Mean(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the mean of all the values in a collection
            </summary>
            <param name="values">Collection to find the mean of</param>
            <returns>The mean of all the numbers in values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.StandardDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of all the values in a collection
            </summary>
            <param name="values">Collection to find the SD of</param>
            <returns>The standard deviation S(x) of all the numbers in values</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.StandardDev(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Calculates the standard deviation of all the values in a collection
            </summary>
            <param name="values">Collection to find the SD of</param>
            <returns>The standard deviation S(x) of all the numbers in values</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathPlusLib.Extensions.StatExtensions.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})" -->
        <!-- Badly formed XML comment ignored for member "M:MathPlusLib.Extensions.StatExtensions.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int32})" -->
        <member name="M:MathPlusLib.Extensions.StatExtensions.Proportion(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Returns the proportion of values that are true, ranging from 0 to 1
            </summary>
            <param name="sample">Values to count</param>
            <returns>Proportion of values that are true</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.StatExtensions.Proportion``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns the proportion of values that return true in the evaluator,
            ranging from 0 to 1
            </summary>
            <typeparam name="T">Type within the data</typeparam>
            <param name="sample">Values to count</param>
            <param name="evaluator">
            Predicate to determine if the value should contribute to
            the proportion, or against it
            </param>
            <returns>Proportion of values that returned true when put through the evaluator</returns>
        </member>
        <member name="T:MathPlusLib.Extensions.TrigExtensions">
            <summary>
            Extension methods for <see cref="T:MathPlusLib.MathPlus.Trig"/>
            </summary>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Sin(System.Double)">
            <summary>
            Returns the sine of a value
            </summary>
            <param name="theta">Angle to take the sine of, in radians</param>
            <returns>Sine of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Sin(System.Int32)">
            <summary>
            Returns the sine of a value
            </summary>
            <param name="theta">Angle to take the sine of, in radians</param>
            <returns>Sine of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Cos(System.Double)">
            <summary>
            Returns the cosine of a value
            </summary>
            <param name="theta">Angle to take the cosine of, in radians</param>
            <returns>Cosine of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Cos(System.Int32)">
            <summary>
            Returns the cosine of a value
            </summary>
            <param name="theta">Angle to take the cosine of, in radians</param>
            <returns>Cosine of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Tan(System.Double)">
            <summary>
            Returns the tangent of a value
            </summary>
            <param name="theta">Angle to take the tangent of, in radians</param>
            <returns>Tangent of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Tan(System.Int32)">
            <summary>
            Returns the tangent of a value
            </summary>
            <param name="theta">Angle to take the tangent of, in radians</param>
            <returns>Tangent of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Csc(System.Double)">
            <summary>
            Returns the cosecant of a value
            </summary>
            <param name="theta">Angle to take the cosecant of, in radians</param>
            <returns>Cosecant of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Csc(System.Int32)">
            <summary>
            Returns the cosecant of a value
            </summary>
            <param name="theta">Angle to take the cosecant of, in radians</param>
            <returns>Cosecant of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Sec(System.Double)">
            <summary>
            Returns the secant of a value
            </summary>
            <param name="theta">Angle to take the secant of, in radians</param>
            <returns>Secant of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Sec(System.Int32)">
            <summary>
            Returns the secant of a value
            </summary>
            <param name="theta">Angle to take the secant of, in radians</param>
            <returns>Secant of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Cot(System.Double)">
            <summary>
            Returns the cotangent of a value
            </summary>
            <param name="theta">Angle to take the cotangent of, in radians</param>
            <returns>Cotangent of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.Cot(System.Int32)">
            <summary>
            Returns the cotangent of a value
            </summary>
            <param name="theta">Angle to take the cotangent of, in radians</param>
            <returns>Cotangent of theta</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ASin(System.Double)">
            <summary>
            Returns the inverse sine (arcsine) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse sine of</param>
            <returns>Inverse sine of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ASin(System.Int32)">
            <summary>
            Returns the inverse sine (arcsine) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse sine of</param>
            <returns>Inverse sine of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ACos(System.Double)">
            <summary>
            Returns the inverse cosine (arccosine) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse cosine of</param>
            <returns>Inverse cosine of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ACos(System.Int32)">
            <summary>
            Returns the inverse cosine (arccosine) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse cosine of</param>
            <returns>Inverse cosine of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ATan(System.Double)">
            <summary>
            Returns the inverse tangent (arctangent) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse tangent of</param>
            <returns>Inverse tangent of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ATan(System.Int32)">
            <summary>
            Returns the inverse tangent (arctangent) of a value
            </summary>
            <param name="proportion">Side lengths proportion to find the inverse tangent of</param>
            <returns>Inverse tangent of proportion, in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians for easier use with <see cref="T:MathPlusLib.MathPlus.Trig"/>
            </summary>
            <param name="degrees">Degrees units to convert</param>
            <returns>Angle in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ToRadians(System.Int32)">
            <summary>
            Converts degrees to radians for easier use with <see cref="T:MathPlusLib.MathPlus.Trig"/>
            </summary>
            <param name="degrees">Degrees units to convert</param>
            <returns>Angle in radians</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees for after use with <see cref="T:MathPlusLib.MathPlus.Trig"/>
            </summary>
            <param name="degrees">Radians units to convert</param>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:MathPlusLib.Extensions.TrigExtensions.ToDegrees(System.Int32)">
            <summary>
            Converts radians to degrees for after use with <see cref="T:MathPlusLib.MathPlus.Trig"/>
            </summary>
            <param name="degrees">Radians units to convert</param>
            <returns>Angle in degrees</returns>
        </member>
        <member name="T:MathPlusLib.Fraction">
            <summary>
            A quantity represented by one integer divided by another.
            </summary>
        </member>
        <member name="P:MathPlusLib.Fraction.Numerator">
            <summary>
            Upper part of the fraction
            </summary>
        </member>
        <member name="P:MathPlusLib.Fraction.Denominator">
            <summary>
            Lower part of the fraction
            </summary>
        </member>
        <member name="P:MathPlusLib.Fraction.FloatingPoint">
            <summary>
            Converts the fraction to its <see cref="T:System.Double"/> equivalent
            </summary>
        </member>
        <member name="P:MathPlusLib.Fraction.Inverse">
            <summary>
            Returns the inverse, 1 / <c>this</c>.
            </summary>
        </member>
        <member name="P:MathPlusLib.Fraction.MaxDenominator">
            <summary>
            Static value for the maximum denominator to use when creating 
            <c>Fraction</c> from a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:MathPlusLib.Fraction.#cctor">
            <summary>
            Initializes <see cref="P:MathPlusLib.Fraction.MaxDenominator"/> to 1 000 000.
            </summary>
        </member>
        <member name="M:MathPlusLib.Fraction.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a <c>Fraction</c> from a given numerator and denominator
            </summary>
            <param name="numerator">Numerator of fraction</param>
            <param name="denominator">Denominator of fraction</param>
        </member>
        <member name="M:MathPlusLib.Fraction.#ctor(System.Double,System.Int32)">
            <summary>
            Instantiates a <c>Fraction</c> from a given <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">Value to convert to a fraction</param>
            <param name="digitPrecision">
            Precision to use when testing potential denominators
            </param>
            <remarks>
            This algorithm can be quite slow if decimal values are off by 
            a slight amount.
            </remarks>
        </member>
        <member name="M:MathPlusLib.Fraction.ToDouble">
            <summary>
            Divides the fraction to a <see cref="T:System.Double"/>.
            </summary>
            <returns>A <c>double</c> from 
            <see cref="P:MathPlusLib.Fraction.Numerator"/> / <see cref="P:MathPlusLib.Fraction.Denominator"/></returns>
        </member>
        <member name="M:MathPlusLib.Fraction.Simplify">
            <summary>
            Simplifies fraction so that the denominator and numerator have no 
            common factors.
            </summary>
        </member>
        <member name="M:MathPlusLib.Fraction.Equals(System.Object)">
            <summary>
            Compares <c>this</c> to another <c>object</c> to see if they are equal.
            </summary>
            <param name="obj">Object to compare against</param>
            <returns>True if the objects are compatible and equal, false otherwise.</returns>
        </member>
        <member name="M:MathPlusLib.Fraction.GetHashCode">
            <summary>
            Converts fraction to a hashcode <see cref="T:System.Int32"/>.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> generated from the 
            <see cref="P:MathPlusLib.Fraction.Numerator"/> and <see cref="P:MathPlusLib.Fraction.Denominator"/>
            </returns>
            <remarks>Both values will be truncated to an <see cref="T:System.Int16"/> when generating.</remarks>
        </member>
        <member name="M:MathPlusLib.Fraction.ToString">
            <summary>
            Serializes to a mathematically friendly <see cref="T:System.String"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> in the form of 
            <see cref="P:MathPlusLib.Fraction.Numerator"/> / <see cref="P:MathPlusLib.Fraction.Denominator"/>.
            </returns>
        </member>
        <member name="T:MathPlusLib.MathMatrix">
            <summary>
            Matrix of <see cref="T:System.Double"/> values.
            </summary>
        </member>
        <member name="M:MathPlusLib.MathMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <c>MathMatrix</c> object, filled with zeroes
            </summary>
            <param name="width">Width of matrix</param>
            <param name="height">Height of matrix</param>
        </member>
        <member name="M:MathPlusLib.MathMatrix.#ctor(MathPlusLib.Matrix{System.Double})">
            <summary>
            Copies a <see cref="!:Matrix"/> of <see cref="T:System.Double"/> values to
            a new <c>MathMatrix</c>.
            </summary>
            <param name="copied">Matrix to copy</param>
        </member>
        <member name="M:MathPlusLib.MathMatrix.#ctor(System.Double[][])">
            <summary>
            Copies an array of <see cref="T:System.Double"/> arrays.
            </summary>
            <param name="array">Array to copy</param>
        </member>
        <member name="M:MathPlusLib.MathMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Copies a multidimensional <see cref="T:System.Double"/> array.
            </summary>
            <param name="array">Array to copy</param>
        </member>
        <member name="M:MathPlusLib.MathMatrix.Determinant">
            <summary>
            Calculates the determinant of <c>this</c>.
            </summary>
            <returns>Determinant of square matrix</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if matrix is not square.</exception>
        </member>
        <member name="M:MathPlusLib.MathMatrix.SumRow(System.Int32)">
            <summary>
            Calculates the sum of all values in a specified row
            </summary>
            <param name="row">Row index to sum</param>
            <returns>Sum of all data in the specified row</returns>
        </member>
        <member name="M:MathPlusLib.MathMatrix.SumColumn(System.Int32)">
            <summary>
            Calculates the sum of all values in a specified column
            </summary>
            <param name="col">Column index to sum</param>
            <returns>Sum of all data in the specified column</returns>
        </member>
        <member name="M:MathPlusLib.MathMatrix.SumAll">
            <summary>
            Calculates the sum of all values in the matrix
            </summary>
            <returns>Sum of all data in the matrix</returns>
        </member>
        <member name="M:MathPlusLib.MathMatrix.Parse(System.String)">
            <summary>
            Parses string matrix in form of '[[A,B,C],[D,E,F],[G,H,I]]'.
            Whitespace is allowed and ignored.
            </summary>
            <param name="matrix">String to parse</param>
            <returns>New MathMatrix from string matrix</returns>
        </member>
        <member name="T:MathPlusLib.Stats.ChiSquareModel">
            <summary>
            X^2 model for multiple counts
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareModel.DegreesOfFreedom">
            <summary>
            Degrees of freedom used by the model
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareModel.#ctor(System.Double)">
            <summary>
            Creates an instance of ChiSquareModel
            </summary>
            <param name="df">Degrees of freedom</param>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareModel.ScaledCDF(System.Double,System.Double)">
            <summary>
            Calculates the CDF of a section of the ChiSquareModel
            </summary>
            <param name="bottom">Lower bound of CDF</param>
            <param name="top">Upper bound of CDF</param>
            <returns>CDF of a section of the ChiSquareModel</returns>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareModel.CDF(System.Double)">
            <summary>
            Calculates the CDF of the upper side of a ChiSquareModel
            </summary>
            <param name="value">Lower bound of CDF</param>
            <returns>CDF of the ChiSquareModel from value to infinity</returns>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareModel.CDF(System.Double,System.Double)">
            <summary>
            Calculates the CDF of the upper side of a ChiSquareModel
            </summary>
            <param name="chiSquareValue">Lower bound of CDF</param>
            <param name="df">Degrees of freedom used for CDF</param>
            <returns>CDF of the ChiSquareModel from value to infinity</returns>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareModel.ToString">
            <summary>
            Serializes the model to a simple readable string in the format X^2(df).
            </summary>
            <returns>String form of the model</returns>
        </member>
        <member name="T:MathPlusLib.Stats.ChiSquareTestResults">
            <summary>
            Test results for tests using X^2 model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.TestedValue">
            <summary>
            X^2 value tested
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.RejectNullHypothesis">
            <summary>
            True if null hypothesis should be rejected, false if this fails
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.NullHypothesis">
            <summary>
            Zero. The data fits the model given for the test
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.AltHypothesis">
            <summary>
            X^2 > value. The data does not fit the model given for the test
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.Probability">
            <summary>
            Probability that a X^2 value that high or more given that the 
            data fits the model.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.AlphaLevel">
            <summary>
            Alpha Level. Threshold for Probability value. Values lower than 
            this mean the null hypothesis should be rejected.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.DegreesOfFreedom">
            <summary>
            Degrees of freedom used in the model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ChiSquareTestResults.Model">
            <summary>
            Model used in the test
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareTestResults.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a ChiSquareTestResults object.
            </summary>
            <param name="chiSquare">X^2 value calculated by the test</param>
            <param name="prob">Probability of the test</param>
            <param name="df">Degrees of freedom used in model during test</param>
            <param name="alpha">Alpha level used in test</param>
        </member>
        <member name="M:MathPlusLib.Stats.ChiSquareTestResults.ToString">
            <summary>
            Serializes a ChiSquareTestResults object to a list of result values
            </summary>
            <returns>String result</returns>
        </member>
        <member name="T:MathPlusLib.Stats.DataFactory">
            <summary>
            A few functions for setting up hardcoded (testing) data 
            convenient to the programmer.
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.DataFactory.MakeData``1(``0[])">
            <summary>
            Makes a list out of the given elements
            </summary>
            <typeparam name="T">List type</typeparam>
            <param name="elements">Each element of list</param>
            <returns>A new list from the data provided</returns>
        </member>
        <member name="M:MathPlusLib.Stats.DataFactory.MakeMatrix``1(``0[][])">
            <summary>
            Makes a matrix out of the given element
            </summary>
            <typeparam name="T">Matrix type</typeparam>
            <param name="rows">
            Array of arrays to become the data. Each subarray is a row. 
            All subarrays must be the same length.
            </param>
            <returns>A new matrix filled with the data provided</returns>
        </member>
        <member name="T:MathPlusLib.Stats.Interval">
            <summary>
            Numeric interval of values. Primarily used for confidence intervals.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.Interval.Lower">
            <summary>
            Lower bound of the values
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.Interval.Upper">
            <summary>
            Upper bound of the values
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.Interval.Center">
            <summary>
            Calculated center of the interval
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.Interval.Error">
            <summary>
            Distance from the center to each boundary. Half the size of the interval.
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Instantiates a new Interval object.
            </summary>
            <param name="low">Lower bound of the interval</param>
            <param name="high">Upper bound of the interval</param>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.FromCenter(System.Double,System.Double)">
            <summary>
            Instantiates a new Interval object from a given center and standard error.
            </summary>
            <param name="center">Center of the interval</param>
            <param name="error">Standard Error of the interval</param>
            <returns></returns>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.Intersects(MathPlusLib.Stats.Interval)">
            <summary>
            Determines if an interval includes values from another
            </summary>
            <param name="other">Other interval to test</param>
            <returns>True if the intervals overlap, false otherwise</returns>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.Equals(System.Object)">
            <summary>
            Determines if an interval starts and ends at the same points as another.
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>
            True if obj is an Interval and starts and ends at the same
            points as this, false otherwise.
            </returns>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.GetHashCode">
            <summary>
            Converts Interval to int hash code. Truncates Lower to fit.
            </summary>
            <returns>Hash code of Interval</returns>
        </member>
        <member name="M:MathPlusLib.Stats.Interval.ToString">
            <summary>
            Serializes Interval to the format (lower, upper).
            </summary>
            <returns>String in exclusive interval format.</returns>
        </member>
        <member name="T:MathPlusLib.Stats.IModel">
            <summary>
            Base interface for all statistical models in this library
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.IModel.ScaledCDF(System.Double,System.Double)">
            <summary>
            Scaled Cumulative Density Function (CDF) parameterized by
            start and end points
            </summary>
            <param name="bottom">Lower bound of CDF</param>
            <param name="top">Upper bound of CDF</param>
            <returns>The proportion of the model highlighted between the bounds</returns>
        </member>
        <member name="T:MathPlusLib.Stats.ITestResults">
            <summary>
            Base interface for all test result classes in this library
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ITestResults.TestedValue">
            <summary>
            Tested value used in model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ITestResults.RejectNullHypothesis">
            <summary>
            True if the null hypothesis should be rejected, false if this fails.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ITestResults.NullHypothesis">
            <summary>
            Value for which the the tested value is compared to
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ITestResults.AltHypothesis">
            <summary>
            Direction to assume the actual value is if the null hypothesis is rejected.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ITestResults.Probability">
            <summary>
            Probability that null hypothesis is true for a tested value as such or 
            further, depending on alternate hypothesis.
            </summary>
        </member>
        <member name="T:MathPlusLib.Stats.NormalModel">
            <summary>
            Normal (Guassian) statistical model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.NormalModel.Mean">
            <summary>
            Mean (center) of model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.NormalModel.SD">
            <summary>
            Standard Deviation (spread) of model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.NormalModel.Root">
            <summary>
            Normal model with center zero and spread one
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.#ctor(System.Double,System.Double)">
            <summary>
            Instantiates a new instance of NormalModel
            </summary>
            <param name="mu">Mean of model</param>
            <param name="sigma">Standard Deviation/Error of model</param>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.ZScore(System.Double)">
            <summary>
            Returns Z-score of a particular value within the model
            </summary>
            <param name="value">Value for which to get the Z-score</param>
            <returns>Z-score of value</returns>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.ScaledCDF(System.Double,System.Double)">
            <summary>
            Scaled CDF of specific model
            </summary>
            <param name="bottom">Lower bound value of CDF</param>
            <param name="top">Upper bound value of CDF</param>
            <returns>Proportion of model within the boundaries</returns>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.ToString">
            <summary>
            Serializes the model to the format N(mean, sd) as per mathematical standard.
            </summary>
            <returns>Normal model as string</returns>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.CDF(System.Double)">
            <summary>
            Unscaled CDF function of the Normal Model
            </summary>
            <param name="zTop">Upper bound Z-Score of CDF</param>
            <returns>Proportion of Normal Model below specified Z-Score</returns>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.CDF(System.Double,System.Double)">
            <summary>
            Unscaled CDF function of the Normal Model
            </summary>
            <param name="zBot">Lower bound Z-Score of CDF</param>
            <param name="zTop">Upper bound Z-Score of CDF</param>
            <returns>Proportion of Normal Model between speciied Z-scores</returns>
        </member>
        <member name="M:MathPlusLib.Stats.NormalModel.InverseCDF(System.Double)">
            <summary>
            Calculates inverse CDF of Normal Model
            </summary>
            <param name="p">Proportion of Normal Model starting at -inf.</param>
            <returns>Upper bound of CDF of given proportion</returns>
        </member>
        <member name="T:MathPlusLib.Stats.StatisticInappropriateException">
            <summary>
            Exception designed to be caught when performing statistics tests and creating intervals,
            stating that for the data a model or test would be inappropriate.
            </summary>
        </member>
        <member name="T:MathPlusLib.Stats.TModel">
            <summary>
            Student's T statistical model 
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TModel.Mean">
            <summary>
            Mean (center) of model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TModel.SD">
            <summary>
            Standard Deviation (spread) of model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TModel.DF">
            <summary>
            Degrees of Freedom for model
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a new Instance of TModel
            </summary>
            <param name="mean">Mean of model</param>
            <param name="sd">Standard Deviation of model</param>
            <param name="df">Degrees of Freedom</param>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.TScore(System.Double)">
            <summary>
            Calculates the T-Score of a given value
            </summary>
            <param name="value">Value to calculate T-Score from</param>
            <returns>T-Score of specified value relative to this model</returns>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.ScaledCDF(System.Double,System.Double)">
            <summary>
            Calculates Scaled CDF within a range
            </summary>
            <param name="low">Lower bound value</param>
            <param name="high">Upper bound value</param>
            <returns>Proportion of area between the given bounds</returns>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.CDF(System.Double,System.Double)">
            <summary>
            Calculates Unscaled CDF below a T-Score
            </summary>
            <param name="tHigh">Upper bound T-Score</param>
            <param name="df">Degrees of Freedom for model</param>
            <returns>Proportion of area below given T-Score</returns>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Calculates Unscaled CDF between two T-Scores
            </summary>
            <param name="tLow">Lower bound T-Score</param>
            <param name="tHigh">Upper bound T-Score</param>
            <param name="df">Degrees of Freedom for model</param>
            <returns>Proportion of area between given T-Scores</returns>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.InverseCDF(System.Double,System.Double)">
            <summary>
            Calculates (unscaled) inverse cdf of a given P-value
            </summary>
            <param name="prob">P-value for cdf starting at -inf.</param>
            <param name="df">Degrees of freedom for model</param>
            <returns>T-Score for upper bound of CDF area</returns>
        </member>
        <member name="M:MathPlusLib.Stats.TModel.ToString">
            <summary>
            Serializes model to a mathematically friendly string
            </summary>
            <returns>String in the format T[df](mean, sd)</returns>
        </member>
        <member name="T:MathPlusLib.Stats.TTestResults">
            <summary>
            Test results for tests using the Student's <see cref="T:MathPlusLib.Stats.TModel"/>
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.TestedValue">
            <summary>
            Mean value for which a T-Score was generated
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.AlphaLevel">
            <summary>
            Threshold for rejecting the null hypothesis. P-Values lower than this must reject.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.RejectNullHypothesis">
            <summary>
            Whether the null hypothesis has been rejected in the test.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.Probability">
            <summary>
            Likelihood that a value this low/high/far would occur if the null hypothesis is true.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.StandardError">
            <summary>
            Standard Error used in the model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.Model">
            <summary>
            Model used to generate T-Score
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.DegreesOfFreedom">
            <summary>
            Degrees of freedom used in model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.NullHypothesis">
            <summary>
            Value for which the tested model is compared to
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.TTestResults.AltHypothesis">
            <summary>
            Direction to assume the actual value is relative to the null hypothesis,
            if it is rejected.
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.TTestResults.#ctor(System.Double,System.Double,System.Double,MathPlusLib.InequalityType,System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a new TTestResults
            </summary>
            <param name="tested">Tested mean value in test</param>
            <param name="prob">Resulting probability from test</param>
            <param name="hNull">Null hypothesis</param>
            <param name="alt">Alternate hypothesis direction</param>
            <param name="alpha">Alpha level</param>
            <param name="se">Standard error used in model</param>
            <param name="df">Degrees of freedom used in model</param>
        </member>
        <member name="M:MathPlusLib.Stats.TTestResults.ToString">
            <summary>
            Serializes test results into a multiline list of result values
            </summary>
            <returns>String optimized for multiline output</returns>
        </member>
        <member name="T:MathPlusLib.Stats.ZTestResults">
            <summary>
            Test results for tests that use the <see cref="T:MathPlusLib.Stats.NormalModel"/>
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.TestedValue">
            <summary>
            Proportion for which a Z-Score was generated 
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.AlphaLevel">
            <summary>
            Threshold used in test. P-Values lower than this constitute rejecting
            the null hypothesis.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.RejectNullHypothesis">
            <summary>
            Whether to reject the null hypothesis or not
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.NullHypothesis">
            <summary>
            Value for which the tested value is tested against
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.AltHypothesis">
            <summary>
            Direction to assume the actual value is relative to the null hypothesis,
            if it is rejected.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.Probability">
            <summary>
            Likelihood of attaining a value as high/low/far as the tested value if the null
            hypothesis is true.
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.StandardError">
            <summary>
            Standard error to use when generating the Normal Model
            </summary>
        </member>
        <member name="P:MathPlusLib.Stats.ZTestResults.Model">
            <summary>
            Model used in test
            </summary>
        </member>
        <member name="M:MathPlusLib.Stats.ZTestResults.#ctor(System.Double,System.Double,System.Double,MathPlusLib.InequalityType,System.Double,System.Double)">
            <summary>
            Instantiates an instance of ZTestResults
            </summary>
            <param name="tested">Tested proportion in test</param>
            <param name="prob">Resulting probability in test</param>
            <param name="hNull">Null Hypothesis</param>
            <param name="hAlt">Alternative Hypothesis</param>
            <param name="alpha">Alpha Level</param>
            <param name="se">Standard Error</param>
        </member>
        <member name="M:MathPlusLib.Stats.ZTestResults.ToString">
            <summary>
            Serializes test results into a multiline list of result values
            </summary>
            <returns>String optimized for multiline output</returns>
        </member>
        <member name="T:MathPlusLib.InequalityType">
            <summary>
            Comparison direction when comparing unequal values.
            Used in Statistical Tests
            </summary>
        </member>
        <member name="F:MathPlusLib.InequalityType.LessThan">
            <summary>
            Value is less than expected
            </summary>
        </member>
        <member name="F:MathPlusLib.InequalityType.NotEqual">
            <summary>
            Value is not equal to expected (two-sided)
            </summary>
        </member>
        <member name="F:MathPlusLib.InequalityType.GreaterThan">
            <summary>
            Value is greater than expected
            </summary>
        </member>
        <member name="T:MathPlusLib.Complex">
            <summary>
            Structure representing a complex number
            </summary>
        </member>
        <member name="P:MathPlusLib.Complex.Real">
            <summary>
            Real part of complex number
            </summary>
        </member>
        <member name="P:MathPlusLib.Complex.Imag">
            <summary>
            Imaginary part of complex number
            </summary>
        </member>
        <member name="P:MathPlusLib.Complex.Argument">
            <summary>
            Argument (angle part) of complex number in radians. Used in polar form.
            </summary>
        </member>
        <member name="P:MathPlusLib.Complex.AbsoluteValue">
            <summary>
            Absolute value (radius part) of complex number. Used in polar form.
            </summary>
        </member>
        <member name="M:MathPlusLib.Complex.FromPolar(System.Double,System.Double)">
            <summary>
            Instantiates a new instance of Complex from polar form
            </summary>
            <param name="arg">Argument, in radians</param>
            <param name="abs">Absolute Value</param>
            <returns>A new Complex from polar form</returns>
        </member>
        <member name="M:MathPlusLib.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Instantiates a new instance of Complex from a given real
            and imaginary values
            </summary>
            <param name="real">Real number part</param>
            <param name="imag">Imaginary number part.</param>
        </member>
        <member name="M:MathPlusLib.Complex.#ctor(System.Double)">
            <summary>
            Instantiates a new instance of Complex from a given real value.
            </summary>
            <param name="real">Real number part</param>
        </member>
        <member name="M:MathPlusLib.Complex.Conjugate">
            <summary>
            Returns the conjugate of the complex number
            </summary>
            <returns>The conjugate of the complex number</returns>
        </member>
        <member name="M:MathPlusLib.Complex.Equals(System.Object)">
            <summary>
            Compares this with another object to see if they are equal
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are equal and numeric types, false if otherwise</returns>
        </member>
        <member name="M:MathPlusLib.Complex.GetHashCode">
            <summary>
            Calculates the hash code of the Complex
            </summary>
            <returns>A hash code from the real and imaginary values</returns>
        </member>
        <member name="M:MathPlusLib.Complex.ToString">
            <summary>
            Serializes the Complex to the mathematically-correct form
            </summary>
            <returns>
            A string in the format of [real] [+] [{imag}i], 
            excluding unnecessary parts.
            </returns>
        </member>
        <member name="T:MathPlusLib.IMathable`1">
            <summary>
            Represents a quantity mathematical operations can be performed upon
            </summary>
            <typeparam name="T">Type which operations can be performed with</typeparam>
        </member>
        <member name="M:MathPlusLib.IMathable`1.Add(`0)">
            <summary>
            Adds with <paramref name="other"/> to produce a sum.
            </summary>
            <param name="other">Object to add</param>
            <returns>The sum of <c>this</c> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathPlusLib.IMathable`1.Subtract(`0)">
            <summary>
            Subtracts <paramref name="other"/> to produce a difference.
            </summary>
            <param name="other">Object to subtract</param>
            <returns>The difference of <c>this</c> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathPlusLib.IMathable`1.Multiply(`0)">
            <summary>
            Multiplies with <paramref name="other"/> to produce a product.
            </summary>
            <param name="other">Object to multiply with</param>
            <returns>The product of <c>this</c> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathPlusLib.IMathable`1.Divide(`0)">
            <summary>
            Divides by <paramref name="other"/> to produce a quotient.
            </summary>
            <param name="other">Object to divide by</param>
            <returns>The quotient of <c>this</c> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathPlusLib.IMathable`1.Exponent(`0)">
            <summary>
            Raises <c>this</c> to the power of <paramref name="other"/>.
            </summary>
            <param name="other">Exponent in the operation</param>
            <returns><c>this</c> ^ <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathPlusLib.IMathable`1.AbsoluteValue">
            <summary>
            Absolute value of <c>this</c>.
            </summary>
            <returns>The absolute value of <c>this</c></returns>
        </member>
        <member name="T:MathPlusLib.Matrix`1">
            <summary>
            Matrix of objects oriented in a grid
            </summary>
            <typeparam name="T">Type of objects stored in matrix</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MathPlusLib.Matrix`1.isIterating" -->
        <member name="P:MathPlusLib.Matrix`1.Width">
            <summary>
            Width of matrix
            </summary>
        </member>
        <member name="P:MathPlusLib.Matrix`1.Height">
            <summary>
            Height of matrix
            </summary>
        </member>
        <member name="F:MathPlusLib.Matrix`1.data">
            <summary>
            All data in matrix. Each subarray represents a column.
            </summary>
        </member>
        <member name="P:MathPlusLib.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Accessor for data within matrix
            </summary>
            <param name="row">Row index of datum</param>
            <param name="col">Column index of datum</param>
            <returns>
            Datum referenced by [<paramref name="row"/>, <paramref name="col"/>]
            </returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <c>Matrix</c> from a given width and height
            </summary>
            <param name="width">Width of new <c>Matrix</c></param>
            <param name="height">Height of new <c>Matrix</c></param>
        </member>
        <member name="M:MathPlusLib.Matrix`1.#ctor(`0[][])">
            <summary>
            Instantiates a new <c>Matrix</c> from a given array of arrays,
            copying all data inside
            </summary>
            <param name="array">Array of arrays to copy</param>
        </member>
        <member name="M:MathPlusLib.Matrix`1.#ctor(`0[0:,0:])">
            <summary>
            Instantiates a new <c>Matrix</c> from a given multidimensional 
            array, copying all data inside
            </summary>
            <param name="array">Multidimensional array to copy</param>
        </member>
        <member name="M:MathPlusLib.Matrix`1.resize(System.Int32,System.Int32)">
            <summary>
            Resizes the matrix when the width or height is changed.
            Shrinking the matrix will delete data from the highest-ranked 
            rows and/or columns permanently.
            </summary>
            <param name="width">New width of matrix</param>
            <param name="height">New height of matrix</param>
        </member>
        <member name="M:MathPlusLib.Matrix`1.GetRow(System.Int32)">
            <summary>
            Returns array of objects in a specified row
            </summary>
            <param name="row">Index of row to obtain</param>
            <returns>An array consisting of all data in the specified row</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.GetColumn(System.Int32)">
            <summary>
            Returns array of objects in a specified column
            </summary>
            <param name="col">Index of column to obtain</param>
            <returns>An array consisting of all data in the specified column</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.Identity(System.Int32)">
            <summary>
            Returns an identity matrix of specified size
            </summary>
            <param name="dim">Size of identity matrix</param>
            <returns>An identity matrix of size <paramref name="dim"/>.</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.IdentityInt(System.Int32)">
            <summary>
            Returns an identity matrix of specified size
            </summary>
            <param name="dim">Size of identity Matrix</param>
            <returns>An identity matrix of size <paramref name="dim"/>.</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.ToList">
            <summary>
            Returns a list of all data in matrix
            </summary>
            <returns>A list of all data in matrix</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.Equals(System.Object)">
            <summary>
            Compares matrix to another <c>object</c>
            </summary>
            <param name="obj"><see cref="T:System.Object"/> to compare to</param>
            <returns>
            True if both objects are equal-sized matrices of equal content, false otherwise.
            </returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.GetHashCode">
            <summary>
            Adds the hashcodes of all contents to produce a hashcode of the matrix.
            </summary>
            <returns>A compiled hashcode of the matrix</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.ToString">
            <summary>
            Serializes the matrix to a readable string.
            </summary>
            <returns>A readable grid of the data, each row separated by newlines</returns>
            <remarks>Calls <see cref="M:MathPlusLib.Matrix`1.ToString(System.Int32)"/>, with <c>maxItemLength</c> of 16</remarks>
        </member>
        <member name="M:MathPlusLib.Matrix`1.ToString(System.Int32)">
            <summary>
            Serializes the matrix to a readable string.
            </summary>
            <param name="maxItemLength">Maximum length of each item before truncating.</param>
            <returns>A readable grid of the dat, each row separated by newlines</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.Foreach(System.Action{`0})">
            <summary>
            Iterates over each item, applying an action to it
            </summary>
            <param name="todo">
            Action taking only one parameter of type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:MathPlusLib.Matrix`1.Foreach(System.Action{System.Int32,System.Int32,`0})">
            <summary>
            Iterates over each item, applying an action to it
            </summary>
            <param name="action">
            Action taking two <c>int</c> parameters for row and column (respectively),
            followed by a parameter of type <typeparamref name="T"/>.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathPlusLib.Matrix`1.Break" -->
        <member name="M:MathPlusLib.Matrix`1.Exists(System.Predicate{`0})">
            <summary>
            Checks if any element matches a specified <see cref="!:Predicate"/>.
            </summary>
            <param name="matches">Predicate testing each item</param>
            <returns>
            True if <paramref name="matches"/> returns true for any element,
            false otherwise.
            </returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.FirstOrDefault(System.Predicate{`0})">
            <summary>
            Finds the first element that matches a specified <see cref="!:Predicate"/>.
            </summary>
            <param name="matches">Predicate testing each item</param>
            <returns>First item <paramref name="matches"/> returns true on, <c>default</c> if none match.</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements that match a specified <see cref="!:Predicate"/>.
            </summary>
            <param name="matches">Predicate testing each item</param>
            <returns>A list containing all items that <paramref name="matches"/> returned true on</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a grid region of this matrix, from a given set of rows and columns
            </summary>
            <param name="startRow">Inclusive lower bound of rows</param>
            <param name="startCol">Inclusive lower bound of columns</param>
            <param name="endRow">Inclusive upper bound of rows</param>
            <param name="endCol">Inclusive upper bound of columns</param>
            <returns>A matrix consisting of the cells within the bounds</returns>
        </member>
        <member name="M:MathPlusLib.Matrix`1.GetExcludedSubMatrix(System.Int32,System.Int32)">
            <summary>
            Gets a matrix that excludes a given row and column. Used in
            calculating determinant.
            </summary>
            <param name="row">Row to exclude</param>
            <param name="col">Column to exclude</param>
            <returns>
            A matrix that contains all the cells that do not occur on 
            the given row or column.
            </returns>
        </member>
    </members>
</doc>
